# -*- coding: utf-8 -*-
"""INDIAN ECONOMIC  GROWTH

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JegCiiMXgH12nwApRYOHFl8ha--RB9Xr

**IMPORT** **LIBRARIES**
"""

# Commented out IPython magic to ensure Python compatibility.
#import required packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
# sets the backend of matplotlib to the 'inline' backend

"""**IMPORT** **DATASET**"""

eco = pd.read_csv('/content/AIMLPROJECT.csv')



eco.head()

eco.tail()

eco[20:30]

"""**DATA CLEANING**"""

eco.info()

eco.index

eco.columns

eco.dtypes

"""**ACCESSING DATA**"""

eco.count()

eco.nunique()

eco.describe()

eco.GDPGrothRate.value_counts()

eco.memory_usage()

eco.memory_usage(deep=True)

eco.shape

eco.size

eco.ndim

eco.GDPGrothRate.mean()

eco.GDPGrothRate.min()

eco.GDPGrothRate.max()

eco.GDPGrothRate.quantile(0.25)

eco.dtypes

eco.GDPGrothRate.nsmallest(3)

eco.GDPGrothRate.nlargest(4)

eco.corr()

print(eco)

eco.head(8)

eco.tail(8)

eco[:20]

eco[:]

eco[-30:]

eco[60:21]

eco['GDPGrothRate']

eco.isnull()

eco.isnull().all()

eco.isnull().sum()

eco.fillna('Not_Define')

eco.isna().any

eco.isna().all()

"""**DATA VISUALIZATION**"""

plt.scatter(eco.GDPGrothRate,eco.InflationRate,eco.GDPBillionUSD,eco.ImportValueBillionUSD)
plt.show()

sns.heatmap(eco.corr())

sns.heatmap(eco.corr(),annot=True)

sns.heatmap(eco.corr(),annot=True,cmap='Blues')

sns.heatmap(eco.corr(),annot=True,cmap='rainbow')



plt.scatter(eco.GDPGrothRate,eco.InflationRate,eco.GDPBillionUSD,eco.ImportValueBillionUSD)
plt.title("Economic Growth")
sns.set()
plt.show()

# Extra visualization
# relplot show the relationship between two variables with semantic mappings of subsets
# by default relplot type is scatter we can change to line ------- kind=line)
sns.relplot(data=eco, x="GDPBillionUSD", y="ImportValueBillionUSD")

sns.relplot(data=eco, x="GDPBillionUSD", y="ImportValueBillionUSD", hue="GDPGrothRate")

sns.relplot(data=eco, x="GDPBillionUSD", y="ImportValueBillionUSD", hue="GDPGrothRate",col="InflationRate",col_wrap=3)

sns.set_context("poster")
sns.relplot(data=eco, x="GDPBillionUSD", y="ImportValueBillionUSD", kind="line", ci=None)

import seaborn as sns
from matplotlib import pyplot as plt
eco=pd.read_csv("AIMLPROJECT.csv")
sns.set_style("ticks")
sns.pairplot(eco, hue="GDPBillionUSD", diag_kind="ImportValueBillionUSD", kind="scatter", palette="husl")
plt.show()

sns.pointplot( x="GDPBillionUSD", y="ImportValueBillionUSD", data=eco)
plt.show()

SA=pd.read_csv("AIMLPROJECT.csv")
SA.head()



# Add regression line to scatter plot and kernel density estimate to histogram
sns.jointplot(x='GDPBillionUSD', y='ImportValueBillionUSD', data=SA, kind='reg')

sns.jointplot(x='GDPBillionUSD', y='ImportValueBillionUSD', data=SA, kind='kde')

# Display hexagons instead of points in scatter plot

sns.jointplot(x='GDPBillionUSD', y='ImportValueBillionUSD', data=SA, kind='hex')

#A box plot is composed of a summary of 5 different data points: the minimum, first quartil
#sns.boxplot(x='Temperature', y='Revenue', data=SA)
ax = sns.boxplot(x=SA['GDPBillionUSD'])

ax = sns.violinplot(x=SA['GDPGrothRate'])

ax = sns.violinplot(x=SA['GDPBillionUSD'])

ax = sns.regplot(x='GDPGrothRate', y='GDPBillionUSD', data=SA,ci=None)

sns.lmplot(x='GDPBillionUSD', y='InflationRate', data=SA)

eco.count().plot.bar()

eco.count().plot.barh()

eco.GDPGrothRate.plot.density()

SA=pd.read_csv("AIMLPROJECT.csv")
SA.head()

sns.jointplot(x='GDPGrothRate', y='InflationRate', data=SA, kind='reg')

sns.jointplot(x='GDPGrothRate', y='InflationRate', data=SA, kind='kde')

sns.jointplot(x='GDPGrothRate', y='InflationRate', data=SA, kind='hex')

ax = sns.boxplot(x=SA['GDPGrothRate'])

ax = sns.boxplot(x=SA['InflationRate'])

ax = sns.boxplot(x=SA['GDPBillionUSD'])

ax = sns.boxplot(x=SA['ExportValueBillionUSD'])

ax = sns.boxplot(x=SA['ImportValueBillionUSD'])

ax = sns.boxplot(x=SA['CurrentAccountDeficit'])

ax = sns.regplot(x='GDPGrothRate', y='InflationRate', data=SA,ci=None)

sns.lmplot(x='GDPGrothRate', y='InflationRate', data=SA)

y = eco['GDPGrothRate']
X = eco[['InflationRate']]

X

"""**LINEAR REGRESSION **"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

X_train.shape # size of training dataset
from sklearn.linear_model import LinearRegression

regressor = LinearRegression(fit_intercept = True)
regressor.fit(X_train,y_train)

print('Linear Model Coefficient (m): ', regressor.coef_)
print('Linear Model Coefficient (b): ', regressor.intercept_)

y_predict = regressor.predict( X_test)
y_predict

y_test

plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, regressor.predict(X_train), color = 'red')
plt.ylabel('GDPGrothRate')
plt.xlabel('InflationRate')
plt.title('GDP GROWTH vs. INFLATION RATE @INDIAN ECONOMY SYSTEM(Training dataset)')

plt.scatter(X_train, y_train, color = 'gray')
plt.plot(X_train, regressor.predict(X_train), color = 'red')
plt.ylabel('GDPGrothRate')
plt.xlabel('GDPBillionUSD')
plt.title('GDP GROWTH vs. GDPBillionUSD @INDIAN ECONOMY SYSTEM(Training dataset)')

# Display Performance metrics, SLope and Intercept

import sklearn.metrics as metrics

wts = regressor.coef_
incpt = regressor.intercept_
print("Slope :",wts,"\n\nIntercept ",incpt,"\n")
print('Mean Absolute Error-MAE', metrics.mean_absolute_error(y_test,y_predict),"\n")
print("Mean Square Error-MSE : ", metrics.mean_squared_error(y_test, y_predict),"\n")
print('Root Mean Square Error- RMSE :', np.sqrt(metrics.mean_squared_error(y_test, y_predict)),"\n")
print('R2 score  :', metrics.r2_score(y_test, y_predict),"\n")

"""**TESTING THE MODEL**"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_test.shape

# import the libraries
import numpy as np
import pandas as pd# import the dataset
ind = pd.read_csv('/content/AIMLPROJECT.csv')# get dummy variables

ind.head()

ind.dtypes

ind_getdummy=pd.get_dummies(data=ind,columns=['GDPGrothRate'])
X=ind_getdummy.drop('UnemploymentRate',axis=1)
y=ind_getdummy['UnemploymentRate']

X

y

ind.head()

ind[35:50]

ind.isnull().sum()

ind.shape

ind.describe()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

ind.head()

sns.countplot(ind['GDPGrothRate'], palette = 'Set2')
plt.title ('GDPGrothRate vs. Quantity', fontsize = 10)
plt.show()

ind.head()

ind.shape

ind. drop('CurrentAccountDeficit', axis=1, inplace=True)

ind.shape

ind.head()

sns.set_context("paper")
sns.scatterplot(x='GDPGrothRate', y='InflationRate', data=ind, hue='GDPBillionUSD')

sns.set_context("poster")
sns.relplot(data=ind, x="GDPGrothRate", y="InflationRate", hue="GDPBillionUSD")

sns.set_style("ticks")
sns.pairplot(ind,hue = 'GDPGrothRate',diag_kind = "InflationRate",kind = "scatter",
 palette = "husl")
plt.show()

sns.distplot(ind['GDPGrothRate'], bins = 10, color = 'green', label = 'KDE')
plt.legend()
plt.gcf().set_size_inches(12, 5)

X.drop('CurrentAccountDeficit',axis=1,inplace=True)

# split the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state =0)

y

# Scale the data set
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

#importing libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
ds=pd.read_csv('/content/AIMLPROJECT.csv')
ds.head()

#assigning independent and dependent variables
x = ds.iloc[:,2:-1].values
y = ds.iloc[:,-1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,
 random_state = 0)